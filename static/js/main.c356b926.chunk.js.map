{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","emojiName","className","text","emoji","getUnicode","onClick","onDeleteCallback","id","NewCardForm","useState","newCard","setNewCard","onInputChange","event","target","name","value","newCardInfo","onFormSubmit","preventDefault","onAddCard","onSubmit","type","placeholder","onChange","Board","url","boardName","cards","setCards","errorMessage","setErrorMessage","getCards","useCallback","axios","get","then","response","boardCards","data","map","card","catch","error","cause","useEffect","delete","post","errors","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c356b926.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './Card.css';\n\nconst Card = (props) => {\n\n\n    // convert name to unicode symbol if not empty\n    const emojiSymbol = (emojiName) => {\n      if (emojiName) {\n        return emoji.getUnicode(emojiName);\n      } else {\n        return \"\";\n      }\n    };\n    const buttonClick = () => {\n      props.onDeleteCallback(props.id)\n    }\n\n\n  return (\n    <div className=\"card\">\n      <div className=\"card__content\">\n        \n        <p className=\".card__content-text\">{ props.text }</p>\n        <p className=\"card__content-emoji\">{ emojiSymbol(props.emojiName) }</p>\n        \n      </div>\n      <button className=\"card__delete\" onClick={buttonClick}>X</button>\n    </div>\n  )\n}\n\nCard.propTypes = {\n  id: PropTypes.number,\n  text: PropTypes.string,\n  emojiName: PropTypes.string,\n  onDeleteCallback: PropTypes.func.isRequired\n};\n\nexport default Card;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\"\", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nconst NewCardForm = (props) => {\n  const [newCard, setNewCard] = useState({\n    text: \"\",\n    emoji: \"\"\n  });\n\n  const onInputChange = event => {\n    const { name, value } = event.target;\n\n    const newCardInfo = {\n      ...newCard,\n      [name]: value // [name] get value of name and use it as the key | value is the variable above\n    };\n  \n    setNewCard(newCardInfo);\n  };\n\n  const onFormSubmit = event => {\n    // prevent browser from trying to submit form\n    event.preventDefault();\n\n    props.onAddCard(newCard);\n\n    // reset input fields\n    setNewCard({\n      text: \"\",\n      emoji: \"\"\n    });\n  };\n\n  return (\n    <div className=\"new-card-form\">\n      <h3 className=\"new-card-form__header\">Leave some inspiration:</h3>\n      <form className=\"new-card-form__form\" onSubmit={onFormSubmit}>\n\n        <input \n          className=\"new-card-form__form-textarea\" \n          type=\"text\"\n          placeholder=\"An encouraging message\" \n          name=\"text\"\n          value={newCard.text}\n          onChange={onInputChange} />\n\n        <input \n          className=\"new-card-form__form-textarea\"\n          placeholder=\"emoji name\" \n          type=\"text\" \n          name=\"emoji\" \n          value={newCard.emoji}\n          onChange={onInputChange} />\n      \n        <input \n          className=\"new-card-form__form-button\" \n          type=\"submit\" \n          value=\"Add note\" \n          onSubmit={onFormSubmit} />\n\n      </form>\n\n    </div>\n  )\n};\n\nNewCardForm.propTypes = {\n  onAddCard: PropTypes.func.isRequired\n};\n\nexport default NewCardForm;","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n\nconst Board = ({url, boardName}) => {\n\n  const [cards, setCards] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const getCards = useCallback(() => {\n    axios.get(`${url}${boardName}/cards`)\n      .then((response) => {\n        // Get the list of students\n        const boardCards = response.data.map((card) => {\n          return (\n            <Card\n              id={card.card.id}\n              text={card.card.text}\n              emojiName={card.card.emoji}\n              onDeleteCallback={onDeleteCallback}\n            />\n          )\n        });\n\n        setCards(boardCards);\n      })\n      .catch((error) => {\n        setErrorMessage(error.response.data.cause);\n      });\n  }, []);\n\n  useEffect (getCards);\n\n  // add a card\n  const onAddCard = card => {\n    axios.post(`${url}${boardName}/cards`, card)\n      .then(() => {\n        getCards();\n      })\n      .catch((error) => {\n        setErrorMessage(error.response.data.errors.text);\n      });\n  };\n\n\n  // delete a card\n  const onDeleteCallback = (id) => {\n    axios.delete(`https://inspiration-board.herokuapp.com/cards/${id}`)\n      .then(() => {\n        getCards(); // calls helper function to recall from API\n      })\n      \n      .catch((error) => {\n        setErrorMessage(error.response.data.cause);\n      });\n  };\n\n  return (\n    <article>\n      <div className=\"validation-errors-display\">\n        {\n          errorMessage !== \"\" ? errorMessage : null\n        }\n      </div>\n      <div className=\"board\">\n        <NewCardForm onAddCard={onAddCard} />\n        {cards}\n      </div>\n    </article>\n  )\n};\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nconst App = () => {\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n      </header>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={`nora-antonia`}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}